# -*- coding: utf-8 -*-
"""Tasks_Martin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LeAgLZo5T3lX4zCINgoN9l_ModRODj9w

## Task 2
"""

#Reading and Writing from a file.
#reading a file
f1 = open("/content/File1.txt",'r')
print(f1.read())

f1.close()

#writing the contents of a file
f2 = open("/content/sample_text1.txt", 'r')
print(f2.read())

f2.close()

f2 = open("/content/sample_text1.txt", 'w')

f2.write('I will now make changes in the contents of the file/n',)
f2.close()

f2 = open("/content/sample_text1.txt", 'r')

print(f2.read())

f2.close()

# to find out the file size
import os

file_name ="/content/sample_text2.txt"

file_stats = os.stat(file_name)

print(file_stats)
print(f'File Size in Bytes is {file_stats.st_size}')

#to find out the most frequent word
from collections import Counter
with open("/content/sample_text2.txt", 'r') as file_1:
   text = file_1.read().lower()
   words = text.split()
   word_counts = Counter(words)
   most_common_word, frequency = word_counts.most_common(1)[0]
print(f"The most frequent word is '{most_common_word}' with frequency {frequency}.")
file_1.close()

# to get a specific line from a file
file1=open("/content/sample_text2.txt","r")
content=file1.readlines()
file1.close()
index=int(input("Enter the line number to read:"))
print(content[index-1])

#loading a json file in python
import json

f = open('/content/sample.json')

data = json.load(f)

print(data)

f.close()

dictionary = {
    "name": "Harsh Martin Topno",
    "rollno": 2306187,
    "language": "Python"
}

with open("sample.json", "w") as outfile:
    json.dump(dictionary, outfile)

f = open('/content/sample.json')
data = json.load(f)

print(data)

f.close()

"""## Task 3"""

#Create an empty and a full NumPy array
import numpy as np

empty_arr = np.empty((3,3,3))
print(empty_arr)

full_arr = np.full((3,3,3),24)
print(full_arr)

#Create a Numpy array filled with all zeros
arr_0 = np.zeros((3,4,3))
print(arr_0)

#Create a Numpy array filled with all ones
arr_1 = np.ones((4,3,4))
print(arr_1)

# Replace NumPy array elements that donâ€™t satisfy a given condition
array = np.random.randint(50, size=(4,4,4))
print(array)

array.shape

print("Array before checking the condition\n")
print(array)

for i in range(4):
  for j in range(4):
    for k in range(4):
      if array[i,j,k]%2 == 0:
        pass
      else:
        array[i,j,k] = 0

print("\nArray after checking the condition and replacing the values\n")
print(array)

#Get the maximum value from a matrix
array = np.random.randint(50, size=(4,4,4))
print(array)
print(f"\nThe maximum value of the matrix is: {array.max()} ")

"""## Task 4"""

#Using dataset- "Historical NBA Finals and MVP Results" from Kaggle
import pandas as pd

data = pd.read_csv("/content/archive (6).zip")

data.head()

data.drop(['index'],axis = 1, inplace = True)

#Split a column in Pandas dataframe and get part of it

data['MVP Nationality'].unique()

data[["West_Game_win",'East_Game_win']] = data['Result'].str.split("â€“",n=1,expand= True)

data.head()

data.tail()

data[["West_Game_win",'East_Game_win']]

#Return the Index label if some condition is satisfied over a column in Pandas Dataframe
#condition: show the rows labels for those columns whose year is divisible by 4
count = 0
for year in data['Year']:

  if year%4 == 0 :
    print(data.index[count])
    count += 1
  else:
    count += 1

#Drop rows from the dataframe based on certain condition applied on a column
#condition:dropping all the rows where the MVP is from US
data
count = 0
for i in data['MVP Nationality']:

  if i == 'US' :
    data.drop(count,inplace = True)
    count += 1
  else:
    count += 1

data

"""## Task 5"""

#How to get list of parameters name from a function in Python

def my_func(a,b,c,d):
  pass

import inspect

#to get the parameters list of an explicit function
print(inspect.signature(my_func))

#to get the parameters list of an in-built function
print(inspect.signature(list))

#How to Print Multiple Arguments in Python?

#for known number of arguments
#there are multiple ways to this
def my_func(argument1,argument2,argument3):
  print("The arguments provided by the user are: {a}, {b}, {c}".format(a = argument1, b = argument2, c = argument3))
  #or we can use f-string
  print(f"The arguments provided by the user are: {argument1}, {argument2}, {argument3}")

my_func('Harsh Martin Topno', 18,"CSE")

#for unknown number of arguments
def func_to_print(*args):
  print("The arguments given by the user are:")
  for i in args:
    print(i)

func_to_print('Harsh Martin Topno', 18)

#Python program to find the power of a number using recursion
def power(number,p):
  if p == 0:
    return 1
  elif p > 0:
    return (number * power(number,p-1))
  else:
    return (1/number * power(number,p+1))

power(6,9)

power(6,-5)

